<header class="bg-black fixed top-0 left-0 w-full z-10">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <div class="flex items-center">
        <%= image_tag asset_path("default_avatar.png"), class: "h-10" %>
        <%= link_to 'chill shisha', root_path, class: "text-white text-2xl mx-4 tracking-wider" %>
      </div>

      <!-- ransack検索フォーム -->
      <div class="flex-grow mx-4">
        <% if @q %>
          <%= search_form_for @q, url: shops_path, method: :get, local: true, class: 'w-full' do |f| %>
            <div data-controller="autocomplete", id='header-autocomplete-input'
                 data-autocomplete-url-value="/shops/autocomplete"
                 role="combobox"
                 class="flex-grow w-full relative">
              <%= f.search_field :title_or_description_or_area_or_budget_or_scene_or_address_cont,
                data: {
                  autocomplete_target: 'input'
                  # action: 'input->autocomplete#onInput focus->autocomplete#onFocus blur->autocomplete#onBlur'
                },
                class: 'input input-bordered w-full px-4 py-2 rounded-lg',
                placeholder: "店舗名で検索" %>
              <%= f.hidden_field :title, data: { autocomplete_target: 'hidden' } %>
              <div data-autocomplete-target="results", id='header-autocomplete-results'
                   class="hidden absolute left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg overflow-hidden z-50">
              </div>
            </div>
          <% end %>
        <% end %>
      </div>

      <!-- ナビゲーションリンク -->
      <nav class="flex items-center">
        <ul class="flex space-x-6 text-white">
          <li><%= link_to 'ホーム', root_path, class: "hover:text-gray-300 hover:underline transition duration-150 ease-in-out" %></li>
          <li><%= link_to '店舗一覧', shops_path, class: "hover:text-gray-300 hover:underline transition duration-150 ease-in-out" %></li>
          <li><%= link_to 'お気に入り一覧', favorites_shops_path, class: "hover:text-gray-300 hover:underline transition duration-150 ease-in-out" %></li>
          <li><%= link_to 'マイページ', user_path(current_user), class: "hover:text-gray-300 hover:underline transition duration-150 ease-in-out" %></li>
          <li><%= button_to 'ログアウト', destroy_user_session_path, method: :delete, class: "hover:text-gray-300 hover:underline bg-transparent border-none cursor-pointer p-0 transition duration-150 ease-in-out" %></li>
        </ul>

        <!-- ハンバーガーメニュー -->
        <div class="ml-6 z-20">
          <input type="checkbox" id="menu-toggle" class="absolute w-0 h-0 opacity-0 pointer-events-none">
          <label for="menu-toggle" class="cursor-pointer block">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
            </svg>
          </label>

          <!-- ドロワーメニュー -->
          <div class="z-20 fixed inset-y-0 right-0 w-64 bg-black transform translate-x-full transition-transform duration-300 ease-in-out">
            <div class="p-6">
              <label for="menu-toggle" class="absolute top-4 right-4 text-white cursor-pointer">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </label>
              <nav class="mt-8 space-y-4">
                <% if user_signed_in? %>
                  <div class="flex items-center mb-4">
                    <%= link_to user_path(current_user), class: "flex items-center" do %>
                      <%= image_tag user_avatar(current_user, 40), class: "rounded-full w-10 h-10 mr-3" %>
                      <span class="text-white hover:underline"><%= current_user.name %></span>
                    <% end %>
                  </div>
                <% end %>
                <%= link_to 'ホーム', root_path, class: "block text-white hover:text-gray-300 hover:underline" %>
                <%= link_to '店舗一覧', shops_path, class: "block text-white hover:text-gray-300 hover:underline" %>
                <%= link_to 'お気に入り一覧', favorites_shops_path, class: "block text-white hover:text-gray-300 hover:underline" %>
                <%= link_to 'マイページ', user_path(current_user), class: "block text-white hover:text-gray-300 hover:underline" %>
                <%= button_to 'ログアウト', destroy_user_session_path, method: :delete, class: "block text-white hover:text-gray-300 hover:underline bg-transparent border-none cursor-pointer p-0 w-full text-left" %>
              </nav>
            </div>
          </div>
        </div>
      </nav>
    </div>
  </div>
</header>

<style>
  #menu-toggle:checked + label + div {
    transform: translateX(0);
  }
</style>

<!-- ドロワーメニューのスクリプト -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // ... 既存のコード ...

  // メニュートグルのチェックボックス
  const menuToggle = document.getElementById('menu-toggle');

  // ドロワーメニューの外側をクリックしたときにメニューを閉じる
  document.addEventListener('click', function(e) {
    if (!headerFormElement.contains(e.target) && !menuToggle.contains(e.target) && menuToggle.checked) {
      menuToggle.checked = false;
    }
    hideHeaderResults();
  });
});
</script>

<!-- オートコンプリート機能のスクリプト -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const headerFormElement = document.querySelector('[data-controller="autocomplete"]');
  if (!headerFormElement) {
    console.error('Autocomplete container not found');
    return;
  }

  const headerSearchInput = headerFormElement.querySelector('[data-autocomplete-target="input"]');
  if (!headerSearchInput) {
    console.error('Search input not found');
    return;
  }

  const headerResultsDiv = headerFormElement.querySelector('[data-autocomplete-target="results"]');
  if (!headerResultsDiv) {
    console.error('Results container not found');
    return;
  }

  let headerTimeout = null;
  let currentFocusIndex = -1;
  let resultsVisible = false;

  function hideHeaderResults() {
    headerResultsDiv.classList.add('hidden');
    resultsVisible = false;
    currentFocusIndex = -1;
  }

  function showHeaderResults() {
    headerResultsDiv.classList.remove('hidden');
    resultsVisible = true;
  }

  function updateFocus() {
    const items = headerResultsDiv.querySelectorAll('[data-shop-id]');
    items.forEach((item, index) => {
      if (index === currentFocusIndex) {
        item.classList.add('bg-gray-100');
        item.setAttribute('aria-selected', 'true');
        // スクロールして選択項目が見えるようにする
        item.scrollIntoView({ block: 'nearest' });
      } else {
        item.classList.remove('bg-gray-100');
        item.setAttribute('aria-selected', 'false');
      }
    });
  }

  function handleKeyNavigation(e) {
    if (!resultsVisible) return;

    const items = headerResultsDiv.querySelectorAll('[data-shop-id]');
    const itemCount = items.length;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        currentFocusIndex = (currentFocusIndex + 1) % itemCount;
        updateFocus();
        break;

      case 'ArrowUp':
        e.preventDefault();
        currentFocusIndex = currentFocusIndex <= 0 ? itemCount - 1 : currentFocusIndex - 1;
        updateFocus();
        break;

      case 'Enter':
        e.preventDefault();
        if (currentFocusIndex >= 0 && currentFocusIndex < itemCount) {
          const selectedItem = items[currentFocusIndex];
          const shopId = selectedItem.getAttribute('data-shop-id');
          headerSearchInput.value = selectedItem.textContent.trim();
          hideHeaderResults();
          window.location.href = `/shops/${shopId}`;
        }
        break;

      case 'Escape':
        hideHeaderResults();
        headerSearchInput.blur();
        break;
    }
  }

  async function fetchAndShowHeaderResults(query) {
    if (!query.trim()) {
      hideHeaderResults();
      return;
    }

    try {
      const response = await fetch(`/shops/autocomplete?q=${encodeURIComponent(query.trim())}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin'
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const shops = await response.json();

      if (!shops || shops.length === 0) {
        headerResultsDiv.innerHTML = '<div class="p-2 text-gray-500">検索結果がありません</div>';
        showHeaderResults();
        return;
      }

      headerResultsDiv.innerHTML = shops.map(shop => `
        <div class="p-2 hover:bg-gray-100 cursor-pointer" 
             data-shop-id="${shop.id}"
             role="option"
             aria-selected="false"
             tabindex="0">
          ${shop.name}
        </div>
      `).join('');

      // 検索結果クリックイベントの設定
      headerResultsDiv.querySelectorAll('[data-shop-id]').forEach(div => {
        div.addEventListener('click', function() {
          const shopId = this.getAttribute('data-shop-id');
          headerSearchInput.value = this.textContent.trim();
          hideHeaderResults();
          window.location.href = `/shops/${shopId}`;
        });

        div.addEventListener('mouseover', function() {
          const items = headerResultsDiv.querySelectorAll('[data-shop-id]');
          currentFocusIndex = Array.from(items).indexOf(this);
          updateFocus();
        });
      });

      showHeaderResults();
      currentFocusIndex = -1; // リセット
    } catch (error) {
      console.error('Error fetching autocomplete results:', error);
      headerResultsDiv.innerHTML = '<div class="p-2 text-red-500">検索中にエラーが発生しました</div>';
      showHeaderResults();
    }
  }

  // キーボードイベントの追加
  headerSearchInput.addEventListener('keydown', handleKeyNavigation);

  // 入力イベントの処理（デバウンス処理付き）
  headerSearchInput.addEventListener('input', function(e) {
    if (headerTimeout) {
      clearTimeout(headerTimeout);
    }

    headerTimeout = setTimeout(() => {
      fetchAndShowHeaderResults(e.target.value);
    }, 300);
  });

  // フォーカスイベントの処理
  headerSearchInput.addEventListener('focus', function() {
    if (this.value.trim()) {
      fetchAndShowHeaderResults(this.value);
    }
  });

  // クリック時の処理（イベント伝播の停止を追加）
  headerFormElement.addEventListener('click', function(e) {
    e.stopPropagation();
  });

  document.addEventListener('click', function() {
    hideHeaderResults();
  });

  // フォーム送信時の処理
  const form = headerFormElement.closest('form');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      if (headerSearchInput.value.trim()) {
        window.location.href = `/shops?q[title_or_description_or_area_or_budget_or_scene_or_address_cont]=${encodeURIComponent(headerSearchInput.value.trim())}`;
      }
    });
  }
});
</script>