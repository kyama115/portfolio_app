<div class="container mx-auto px-4 py-8">
  <!-- ransack検索フォーム -->
  <div class="flex-grow mx-4 py-4">
    <% if @q %>
      <%= search_form_for @q, url: shops_path, method: :get, local: true, class: 'w-full', id: 'pac-input' do |f| %>
        <div class="flex-grow w-full relative">
          <%= f.search_field :title_or_description_or_area_or_budget_or_scene_or_address_cont,
              class: 'input input-bordered w-full px-4 py-2 rounded-lg',
              placeholder: "店舗名/駅名を入力" %>
          <%= f.hidden_field :title %>
          <div id="autocomplete-results"
               class="hidden absolute left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg overflow-hidden z-50">
          </div>
        </div>
      <% end %>
    <% end %>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div class="md:col-span-2">
      <div id="map" class="h-[500px] w-full rounded-lg shadow-lg"></div>
    </div>
    <div class="bg-white rounded-lg shadow-lg p-4">
      <h2 class="text-xl font-bold mb-4">近くの店舗</h2>
      <div data-maps-target="shopList" class="space-y-4 max-h-[450px] overflow-y-auto"></div>
    </div>
  </div>
</div>

<script>
  let map;
  const markers = [];
  let currentInfoWindow = null;
  let currentLocationMarker = null;

function initMap() {
  const mapElement = document.getElementById('map');
  const defaultLocation = { lat: 35.6803997, lng: 139.7690174 };
  const mapOptions = {
    center: defaultLocation,
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };

  map = new google.maps.Map(mapElement, mapOptions);

  // 現在地取得と表示
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        map.setCenter(pos);
        map.setZoom(18)
        showCurrentLocation(pos);
        // 現在地に基づいて店舗データを再取得
        fetchShopsFromDatabase(pos);
      },
      () => {
        console.log('Geolocation failed');
        showErrorMessage('現在地を取得できませんでした。デフォルトの位置で表示します。');
        // 位置情報の取得に失敗した場合はデフォルトの位置で検索
        fetchShopsFromDatabase(defaultLocation);
      },
      {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0
      }
    );
  } else {
    // Geolocationがサポートされていない場合はデフォルトの位置で検索
    showErrorMessage('お使いのブラウザは位置情報に対応していません。デフォルトの位置で表示します。');
    fetchShopsFromDatabase(defaultLocation);
  }

  // 検索フォームのイベントリスナー
  const searchForm = document.getElementById('pac-input');
  if (searchForm) {
    searchForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const searchInput = this.querySelector('input[type="search"]');
    if (searchInput && searchInput.value) {
      const geocoder = new google.maps.Geocoder();
      geocoder.geocode({ address: searchInput.value }, function(results, status) {
        if (status === 'OK' && results[0]) {
          const searchLocation = results[0].geometry.location;

          // 検索場所を中心に設定
          map.setCenter(searchLocation);
          map.setZoom(16);

          // 検索位置で店舗を再取得
          fetchShopsFromDatabase({
            lat: searchLocation.lat(),
            lng: searchLocation.lng()
          });

          // 検索場所にマーカーを表示（オプション）
          if (currentLocationMarker) {
            currentLocationMarker.setMap(null);
          }
          currentLocationMarker = new google.maps.Marker({
            position: searchLocation,
            map: map,
            icon: {
              path: google.maps.SymbolPath.CIRCLE,
              fillColor: '#4285F4',
              fillOpacity: 1,
              scale: 10,
              strokeColor: 'white',
              strokeWeight: 2
            },
            title: '検索場所',
            zIndex: 999
          });
        } else {
          showErrorMessage('指定した場所が見つかりませんでした。');
        }
      });
    }
  });
}
}

// 現在地マーカーを表示する関数
function showCurrentLocation(position) {
  // 既存の現在地マーカーを削除
  if (currentLocationMarker) {
    currentLocationMarker.setMap(null);
  }

  currentLocationMarker = new google.maps.Marker({
    position: position,
    map: map,
    icon: {
      path: google.maps.SymbolPath.CIRCLE,
      fillColor: '#4285F4',
      fillOpacity: 1,
      scale: 10,
      strokeColor: 'white',
      strokeWeight: 2
    },
    title: '現在地',
    zIndex: 999 // 常に最前面に表示
  });
}

function fetchShopsFromDatabase(position) {
  if (!position) {
    console.error('Position is required for fetching shops');
    return;
  }

  const url = `/map.json?lat=${position.lat}&lng=${position.lng}`;
  console.log('Attempting to fetch shops from:', url);

  // 読み込み中の表示
  const shopList = document.querySelector('[data-maps-target="shopList"]');
  if (shopList) {
    shopList.innerHTML = '<div class="p-4 text-center"><span class="loading loading-spinner loading-md"></span></div>';
  }

  fetch(url, {
    headers: {
      'Accept': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(async response => {
    const contentType = response.headers.get('content-type');
    if (!response.ok) {
      if (contentType && contentType.includes('application/json')) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Unknown error occurred');
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    }
    return response.json();
  })
  .then(shops => {
    console.log('Successfully received shops data:', shops);
    clearMarkers();
    if (Array.isArray(shops) && shops.length > 0) {
      displayShops(shops, position);
    } else {
      if (shopList) {
        shopList.innerHTML = '<div class="p-4 bg-yellow-100 rounded-lg"><p class="text-yellow-700">この付近に店舗が見つかりませんでした。</p></div>';
      }
    }
  })
  .catch(error => {
    console.error('Error details:', error);
    showErrorMessage(error.message);
  });
}

function displayShops(shops, userPosition) {
  const bounds = new google.maps.LatLngBounds();
  const shopList = document.querySelector('[data-maps-target="shopList"]');
  if (shopList) shopList.innerHTML = '';

  // 現在地がある場合は範囲に含める
  if (userPosition) {
    bounds.extend(userPosition);
  }

  // 各店舗の距離を計算してソート用の配列を作成
  const shopsWithDistance = shops.map(shop => {
    if (shop.latitude && shop.longitude) {
      const position = {
        lat: parseFloat(shop.latitude),
        lng: parseFloat(shop.longitude)
      };

      // 距離を計算
      const calculatedDistance = userPosition ? calculateDistance(
        userPosition.lat,
        userPosition.lng,
        position.lat,
        position.lng
      ) : Infinity;

      return {
        ...shop,
        position,
        calculatedDistance
      };
    }
    return null;
  }).filter(shop => shop !== null);

  // 距離でフィルタリング（5km以内）かつソート
  const filteredShops = shopsWithDistance
    .filter(shop => shop.calculatedDistance <= 5)
    .sort((a, b) => a.calculatedDistance - b.calculatedDistance);

  // フィルタリング後の店舗数が0の場合
  if (filteredShops.length === 0) {
    if (shopList) {
      shopList.innerHTML = '<div class="p-4 bg-yellow-100 rounded-lg"><p class="text-yellow-700">10km圏内に店舗が見つかりませんでした。</p></div>';
    }
    return;
  }

  // フィルタリングされた店舗を表示
  filteredShops.forEach(shop => {
    const marker = new google.maps.Marker({
      position: shop.position,
      map: map,
      title: shop.title,
      animation: google.maps.Animation.DROP
    });

    const distanceText = userPosition 
      ? `距離: ${shop.calculatedDistance.toFixed(2)} km`
      : '';

    // 情報ウィンドウの内容
    const infoWindow = new google.maps.InfoWindow({
      content: `
        <div class="p-3">
          <h3 class="font-bold">${shop.title}</h3>
          <p>${shop.address || ''}</p>
          ${shop.description ? `<p>${shop.description}</p>` : ''}
          ${distanceText ? `<p class="text-sm text-gray-600">${distanceText}</p>` : ''}
          <p class="mt-2">
            <a href="/shops/${shop.id}" target="_blank" class="text-blue-600 hover:text-blue-800">
              詳細を見る
            </a>
          </p>
          <p class="mt-2">
            <a href="https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(shop.title)}"
               target="_blank" class="text-blue-600 hover:text-blue-800">
               Googleマップで見る
            </a>
          </p>
        </div>
      `
    });

    // マーカーのクリックイベント
    marker.addListener('click', () => {
      if (currentInfoWindow) currentInfoWindow.close();
      infoWindow.open(map, marker);
      currentInfoWindow = infoWindow;
    });

    markers.push(marker);
    bounds.extend(shop.position);

    // サイドバーのリスト項目を作成
    if (shopList) {
      const shopElement = document.createElement('div');
      shopElement.className = 'p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer';
      shopElement.innerHTML = `
        <h3 class="font-bold">${shop.title}</h3>
        <p class="text-sm text-gray-600">${shop.address || ''}</p>
        ${distanceText ? `<p class="text-sm">${distanceText}</p>` : ''}
      `;

      shopElement.addEventListener('click', () => {
        map.panTo(shop.position);
        map.setZoom(16);
        if (currentInfoWindow) currentInfoWindow.close();
        infoWindow.open(map, marker);
        currentInfoWindow = infoWindow;
      });

      shopList.appendChild(shopElement);
    }
  });

  // マップの表示範囲を調整
  if (!bounds.isEmpty()) {
    map.fitBounds(bounds);
    const listener = google.maps.event.addListener(map, 'idle', function() {
      if (map.getZoom() > 16) map.setZoom(16);
      google.maps.event.removeListener(listener);
    });
  }
}

// 距離計算関数を追加
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // 地球の半径（キロメートル）
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

function toRad(deg) {
  return deg * (Math.PI/180);
}

function clearMarkers() {
  markers.forEach(marker => marker.setMap(null));
  markers.length = 0;
}

function showErrorMessage(message) {
  const shopList = document.querySelector('[data-maps-target="shopList"]');
  if (shopList) {
    shopList.innerHTML = `
      <div class="p-4 bg-red-100 rounded-lg">
        <p class="text-red-700">${message}</p>
      </div>
    `;
  }
}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=places&callback=initMap" async defer></script>

<!-- オートコンプリート機能のスクリプト -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const formElement = document.getElementById('pac-input');
  if (!formElement) {
    console.error('Search form not found');
    return;
  }
  
  const searchInput = formElement.querySelector('input[type="search"]');
  if (!searchInput) {
    console.error('Search input not found');
    return;
  }
  
  const resultsDiv = document.getElementById('autocomplete-results');
  if (!resultsDiv) {
    console.error('Results container not found');
    return;
  }

  let currentTimeout = null;
  let currentFocusIndex = -1;
  let resultsVisible = false;

  function hideResults() {
    resultsDiv.classList.add('hidden');
    resultsVisible = false;
    currentFocusIndex = -1;
  }

  function showResults() {
    resultsDiv.classList.remove('hidden');
    resultsVisible = true;
  }

  async function fetchAndShowResults(query) {
    if (!query.trim()) {
      hideResults();
      return;
    }

    try {
      const response = await fetch(`/shops/autocomplete?q=${encodeURIComponent(query.trim())}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin'
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const shops = await response.json();
      console.log('Received shops:', shops); // デバッグ用

      if (!shops || shops.length === 0) {
        resultsDiv.innerHTML = '<div class="p-2 text-gray-500">検索結果がありません</div>';
      } else {
        resultsDiv.innerHTML = shops.map((shop, index) => `
          <div class="p-2 hover:bg-gray-100 cursor-pointer"
               data-shop-id="${shop.id}"
               data-shop-name="${shop.name}"
               data-index="${index}"
               role="option"
               aria-selected="false">
            ${shop.name}
          </div>
        `).join('');

        // 結果クリックイベントの設定
        resultsDiv.querySelectorAll('[data-shop-id]').forEach(div => {
          div.addEventListener('click', function() {
            const shopName = this.getAttribute('data-shop-name');
            searchInput.value = shopName;
            hideResults();

            const shopId = this.getAttribute('data-shop-id');
            handleShopSelection(shopName);
          });

          div.addEventListener('mouseenter', function() {
            currentFocusIndex = parseInt(this.getAttribute('data-index'));
            updateFocus();
          });
        });
      }

      showResults();
    } catch (error) {
      console.error('Error fetching results:', error);
      resultsDiv.innerHTML = '<div class="p-2 text-red-500">検索中にエラーが発生しました</div>';
    }
  }

  function handleShopSelection(shopName) {
    const geocoder = new google.maps.Geocoder();
    geocoder.geocode({ address: shopName }, function(results, status) {
      if (status === 'OK' && results[0]) {
        const location = results[0].geometry.location;
        map.setCenter(location);
        map.setZoom(16);
        
        if (currentLocationMarker) {
          currentLocationMarker.setMap(null);
        }
        
        currentLocationMarker = new google.maps.Marker({
          position: location,
          map: map,
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            fillColor: '#4285F4',
            fillOpacity: 1,
            scale: 10,
            strokeColor: 'white',
            strokeWeight: 2
          },
          title: shopName,
          zIndex: 999
        });

        fetchShopsFromDatabase({
          lat: location.lat(),
          lng: location.lng()
        });
      }
    });
  }

  function updateFocus() {
    const items = resultsDiv.querySelectorAll('[data-shop-id]');
    items.forEach((item, index) => {
      if (index === currentFocusIndex) {
        item.classList.add('bg-gray-100');
        item.setAttribute('aria-selected', 'true');
      } else {
        item.classList.remove('bg-gray-100');
        item.setAttribute('aria-selected', 'false');
      }
    });
  }

  searchInput.addEventListener('keydown', function(e) {
    if (!resultsVisible) return;

    const items = resultsDiv.querySelectorAll('[data-shop-id]');
    const itemCount = items.length;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        currentFocusIndex = (currentFocusIndex + 1) % itemCount;
        updateFocus();
        break;

      case 'ArrowUp':
        e.preventDefault();
        currentFocusIndex = currentFocusIndex <= 0 ? itemCount - 1 : currentFocusIndex - 1;
        updateFocus();
        break;

      case 'Enter':
        e.preventDefault();
        if (currentFocusIndex >= 0 && items[currentFocusIndex]) {
          const selectedShopName = items[currentFocusIndex].getAttribute('data-shop-name');
          searchInput.value = selectedShopName;
          handleShopSelection(selectedShopName);
          hideResults();
        }
        break;

      case 'Escape':
        hideResults();
        searchInput.blur();
        break;
    }
  });

  searchInput.addEventListener('input', function(e) {
    if (currentTimeout) {
      clearTimeout(currentTimeout);
    }
    currentTimeout = setTimeout(() => {
      fetchAndShowResults(e.target.value);
    }, 300);
  });

  searchInput.addEventListener('focus', function() {
    if (this.value.trim()) {
      fetchAndShowResults(this.value);
    }
  });

  document.addEventListener('click', function(e) {
    if (!formElement.contains(e.target)) {
      hideResults();
    }
  });

  formElement.addEventListener('submit', function(e) {
    e.preventDefault();
    const searchValue = searchInput.value.trim();
    if (searchValue) {
      handleShopSelection(searchValue);
    }
  });
});
</script>
